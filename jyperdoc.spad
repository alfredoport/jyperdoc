)abbrev package AXSERV AxiomServer
AxiomServer: public == private where

 public == with

  axServer: (Integer, SExpression->Void) -> Void
  multiServ: SExpression -> Void
  getConstructorXML: String -> String
  getConstructorHTML: String -> String
  getCommandXML: (SExpression,String) -> Void
  asqXML: String -> String
  writeToFile: String -> Void
  getDatabase: (String,String) -> String

 private == add

  getFile: (SExpression,String) -> Void
  getCommand: (SExpression,String) -> Void
  lastStep: () -> String
  lastType: () -> String
  formatMessages: String -> String
  getContentType: String -> String
  getDescription: String -> String
  getInterp: (SExpression,String) -> Void
  getLisp:   (SExpression,String) -> Void
  getShow:   (SExpression,String) -> Void
  makeErrorPage: String -> String
  getSourceFile: (String,String,String) -> String
  readTheFile: SExpression -> String 
  writeToSocket: (SExpression,String) -> Void
  outputToSocket: (SExpression,String,String) -> Void

  getDatabase(constructor:String, key:String):String ==
    answer:=string GETDATABASE(INTERN$Lisp constructor,INTERN$Lisp key)$Lisp
--    WriteLine$Lisp concat ["getDatabase: ",constructor," ",key," ",answer]
    answer 

-- The axServer function handles the socket connection on the given port.
-- When it gets a input on the socket it calls the server
-- function on the socket input.

  axServer(port:Integer,serverfunc:SExpression->Void):Void ==
--    WriteLine("socketServer")$Lisp
    s := SiSock(port,serverfunc)$Lisp
    -- To listen for just one connection and then close the socket
    -- uncomment i := 0.
    i:Integer := 1
    while (i > 0) repeat
      if not null?(SiListen(s)$Lisp)$SExpression then
        w := SiAccept(s)$Lisp
        serverfunc(w)
        --SLEEP(2)$Lisp 
--        i := 0

-- The multiServ function parses the socket input.
-- It expects either a GET or POST request.
-- A GET request fetches a new page, calling ``getFile''.
-- A POST request starts with
-- \begin{itemize}
-- \item ``command='' which expects axiom interpreter commands.
--       When this is recognized we call the ``getCommand'' function.
-- \item ``lispcall='' which expects lisp interpreter input
--       When this is recognized we call the ``getLisp'' function.
-- \end{itemize}

  multiServ(s:SExpression):Void ==
        WriteLine("multiServ begin")$Lisp
        headers:String := ""
        char:String

       -- read in the http headers
       -- while (char := STRING(READ_-CHAR_-NO_-HANG(s,NIL$Lisp,'EOF)$Lisp)$Lisp) ^= "EOF" and char ^= "NIL" repeat
       --   headers := concat [headers,char]
       --   WriteLine$Lisp "Char: "char

        counter:Integer := 100000
        flag:Integer := 0
        while counter > 0 repeat

          if flag = 0
           then
            char := READ_-LINE(s,NIL$Lisp,'EOF)$Lisp
           else
            char := STRING(READ_-CHAR_-NO_-HANG(s,NIL$Lisp,'EOF)$Lisp)$Lisp

          if #char = 1
           then 
            flag := 1

          --WriteLine$Lisp "Char: "char
          if char = "NIL" then
            counter := counter - 1
          else if char = "EOF" then
            counter := 0
          else
            headers := concat [headers,char]
            counter := 100000
          --WriteLine$Lisp "Header: "headers

        StringMatch("([^ ]*)", headers)$Lisp
        u:UniversalSegment(Integer)
        u := segment(MatchBeginning(1)$Lisp+1,MatchEnd(1)$Lisp)$UniversalSegment(Integer)
        reqtype:String := headers.u
        WriteLine$Lisp  concat ["request type: ",reqtype]

        if reqtype = "GET" then
          StringMatch("GET ([^ ]*)",headers)$Lisp
          u:UniversalSegment(Integer)
          u := segment(MatchBeginning(1)$Lisp+1,MatchEnd(1)$Lisp)$UniversalSegment(Integer)
          getFile(s,headers.u)

        if reqtype = "POST" and StringMatch("command=(.*)$",headers)$Lisp > 0
         then
          u:UniversalSegment(Integer)
          u := segment(MatchBeginning(1)$Lisp+1,MatchEnd(1)$Lisp)$UniversalSegment(Integer)
          getCommand(s,headers.u)

        if reqtype = "POST" and StringMatch("cxml=(.*)$",headers)$Lisp > 0
         then
          u:UniversalSegment(Integer)
          u := segment(MatchBeginning(1)$Lisp+1,MatchEnd(1)$Lisp)$UniversalSegment(Integer)
          getCommandXML(s,headers.u)

        if reqtype = "POST" and StringMatch("interpcall=(.*)$",headers)$Lisp > 0
         then
            u:UniversalSegment(Integer)
            u := segment(MatchBeginning(1)$Lisp+1,_
                         MatchEnd(1)$Lisp)$UniversalSegment(Integer)
            getInterp(s,headers.u)
        if reqtype = "POST" and StringMatch("lispcall=(.*)$",headers)$Lisp > 0
         then
            u:UniversalSegment(Integer)
            u := segment(MatchBeginning(1)$Lisp+1,_
                         MatchEnd(1)$Lisp)$UniversalSegment(Integer)
            getLisp(s,headers.u)
        if reqtype = "POST" and StringMatch("showcall=(.*)$",headers)$Lisp > 0
         then
            u:UniversalSegment(Integer)
            u := segment(MatchBeginning(1)$Lisp+1,_
                         MatchEnd(1)$Lisp)$UniversalSegment(Integer)
            getShow(s,headers.u)
        if reqtype = "POST" and StringMatch("getconstructorhtml=(.*)$",headers)$Lisp > 0
         then
            u:UniversalSegment(Integer)
            u := segment(MatchBeginning(1)$Lisp+1,_
                         MatchEnd(1)$Lisp)$UniversalSegment(Integer)
            writeToSocket(s,getConstructorHTML(headers.u)) 

        if reqtype = "POST" and StringMatch("getconstructorxml=(.*)$",headers)$Lisp > 0
         then
            u:UniversalSegment(Integer)
            u := segment(MatchBeginning(1)$Lisp+1,_
                         MatchEnd(1)$Lisp)$UniversalSegment(Integer)
            writeToSocket(s,getConstructorXML(headers.u))

        if reqtype = "POST" and StringMatch("asqxml=(.*)$",headers)$Lisp > 0
         then
            u:UniversalSegment(Integer)
            u := segment(MatchBeginning(1)$Lisp+1,_
                         MatchEnd(1)$Lisp)$UniversalSegment(Integer)
            writeToSocket(s,asqXML(headers.u))

        if reqtype = "POST" and StringMatch("writetofile=(.*)$",headers)$Lisp > 0
         then
            u:UniversalSegment(Integer)
            u := segment(MatchBeginning(1)$Lisp+1,_
                         MatchEnd(1)$Lisp)$UniversalSegment(Integer)
            writeToFile(headers.u)

        WriteLine("multiServ end")$Lisp
        WriteLine("")$Lisp

  makeErrorPage(msg:String):String ==
     page:String:="<!DOCTYPE html PUBLIC "
     page:=page "_"-//W3C//DTD XHTML 1.0 Strict//EN_" "
     page:=page "_"http://www.w3.org/TR/xthml1/DTD/xhtml1-strict.dtd_">"
     page:=page "<html xmlns=_"http://www.w3.org/1999/xhtml_">"
     page:=page "<head><title>Error</title></head><body>" msg "</body></html>"
--     WriteLine(page)$Lisp
     page

-- We need to fish around in the data structure to return the piece of
-- documentation for the domain. We have to call the lisp version of
-- GETDATABASE because the version above returns a string object. The
-- string object is missing quotes and cannot be properly read. So we
-- need to get the lisp object and work with it in native form first.

  getDescription(dom:String):String ==
    d:=CADR(CADAR(GETDATABASE(INTERN(dom)$Lisp,'DOCUMENTATION)$Lisp)$Lisp)$Lisp
    string d

-- During build we construct a hash table that takes the chunk name as
-- the key and returns the filename. We reconstruct the chunk name here
-- and do a lookup for the source file.

  getSourceFile(constructorkind:String,_
                 abbreviation:String,_
                 dom:String):String ==
     sourcekey:="<<" constructorkind " " abbreviation " " dom ">>"
--     WriteLine(sourcekey)$Lisp
     sourcefile:=lowerCase last split(getDatabase(dom,"SOURCEFILE"),char "/") 
     sourcefile:=sourcefile ".pamphlet"

-- Given a socket and the URL of the file we create an input stream
-- that contains the file. If the filename contains a question mark
-- then we need to parse the parameters and dynamically construct the
-- file contents.

  getFile(s:SExpression,pathvar:String):Void ==
--     WriteLine("")$Lisp
--     pathvar := concat [ "/home/alfredo/Projects/Jyper/", pathvar ]
     WriteLine$Lisp concat ["getFile: ",pathvar]
     params:=split(pathvar,char "?")
     if #params ^= 1
       then
         pathvar := first params
     if not null? PATHNAME_-NAME(PATHNAME(pathvar)$Lisp)$Lisp 
       then
         contentType:String := getContentType(pathvar)
         q:=Open(pathvar)$Lisp
         if null? q 
           then
             q := MAKE_-STRING_-INPUT_-STREAM(_
                   makeErrorPage("File doesn't exist"))$Lisp
     else
       q:=MAKE_-STRING_-INPUT_-STREAM(_
           makeErrorPage("Problem with file path"))$Lisp
     outputToSocket(s,readTheFile(q),contentType) 

  getConstructorHTML(dom:String):String ==

      WriteLine$Lisp "GetHTML: "dom
      constructorkind:=getDatabase(dom,"CONSTRUCTORKIND")      
      abbreviation:=getDatabase(dom, "ABBREVIATION")
      sourcefile:=getDatabase(dom, "SOURCEFILE")
      constructorkind.1:=upperCase constructorkind.1
      description:=getDescription(dom)
      page:String := ""
      page:=page "<div><p>" constructorkind " " dom "</p><hr/>"
      page:=page "<table>"
      page:=page "<tr><td>Description:  </td>"
      page:=page "<td>" description  "</td></tr>"
      page:=page "<tr><td>Abbreviation: </td><td>" abbreviation "</td></tr>"
      page:=page "<tr><td>Source File:  </td><td>" sourcefile   "</td></tr>"
      page:=page "</table><hr/></div>"
      page

-- getConstructor takes a constructor name as an argument an returns
-- an XML structure containing the following information about the constructor:
-- <name> value </name> : Name of the constructor
-- <constructorkind> value </constructorkind> : It can be a category a domain or a package.
-- <abbreviation> value </abbreviation>
-- <sourcefile> value </sourcefile>

  getConstructorXML(c:String):String ==
    constructorkind:=getDatabase(c,"CONSTRUCTORKIND")
    abbreviation:=getDatabase(c, "ABBREVIATION")
    sourcefile:=getDatabase(c, "SOURCEFILE")
    description:=getDescription(c)
    constructor:String:=""
    if sourcefile ^= "NIL"
      then  
        constructor:=concat [ constructor, "<?xml version='1.0' encoding='ISO-8859-1' ?>"_
                                 "<constructor>"_
                                 "<name>" , c , "</name>"_
                                 "<constructorkind>" , constructorkind , "</constructorkind>"_
                                 "<abbreviation>" , abbreviation , "</abbreviation>"_
                                 "<sourcefile>", sourcefile , "</sourcefile>"_
                                 "<description>", description , "</description>"_
                                 "</constructor>" ]
    else
        constructor:=concat [ constructor, "<?xml version='1.0' encoding='ISO-8859-1' ?>", "<constructor/>" ]
    constructor

-- asqXML returns the search obtained from
-- the database from the dom and key arguments.
-- This needs to be revised to see if it needs
-- further processing. The current XML object returned
-- is of the form <asq> result </asq>
  asqXML(request:String):String ==
    requestparam:List(String):=split(request, char "=")
    requestparam := split(last requestparam, char ",")
    dom:String:=first requestparam
    key:String:=last requestparam
    answer:String:=getDatabase(dom,key)
    answer := concat [ "<?xml version='1.0' encoding='ISO-8859-1' ?>", "<asq>", answer, "</asq>" ]
    answer

  writeToFile(request:String):Void ==
    requestparam:List(String):=split(request, char "=")
    requestparam := split(last requestparam, char ",")
    --path:FileName := first requestparam
    content:String := last requestparam
    --ifile:File := open("/tmp/test","output")
    --write!(ifile,content)

-- We have q which is a stream which contains the file. We read the file
-- into a string-stream to get it all into one string. We return the string.

  readTheFile(q:SExpression):String ==
--     WriteLine("begin reading file")$Lisp
     r := MAKE_-STRING_-OUTPUT_-STREAM()$Lisp
     SiCopyStream(q,r)$Lisp
     filestream:String := GET_-OUTPUT_-STREAM_-STRING(r)$Lisp
     CLOSE(r)$Lisp
     CLOSE(q)$Lisp
--     WriteLine("end reading file")$Lisp
     filestream

-- We have ``s'' which is the socket, ``filestream'' which is the text of
-- the file to output, and ``contentType'' which is the HTML Content-Type.
-- We construct the HTML header information according to the standard and
-- prepend it to the file. The resulting string is output to the socket.

  outputToSocket(s:SExpression,filestream:String,contentType:String):Void ==
     filelength:String := string(#filestream)
     file:String := ""
     nl:String:=STRING(NewLine$Lisp)$Lisp
     file := concat ["Content-Length: ",filelength,nl,nl,file]
     file := concat ["Connection: close",nl,file]
     file := concat ["Content-Type: ",contentType,nl,file]
     file := concat ["HTTP/1.1 200 OK",nl,file]
     file := concat [file,filestream]
--     WriteLine(file)$Lisp
     f:=MAKE_-STRING_-INPUT_-STREAM(file)$Lisp
     SiCopyStream(f,s)$Lisp
     CLOSE(f)$Lisp
     CLOSE(s)$Lisp

  writeToSocket(s:SExpression,filestream:String):Void ==
     WriteLine$Lisp "WriteToSocket: "filestream
     file:String := ""
     file := concat [file,filestream]
     f:=MAKE_-STRING_-INPUT_-STREAM(file)$Lisp
     SiCopyStream(f,s)$Lisp
     CLOSE(f)$Lisp
     CLOSE(s)$Lisp

-- The getCommand function is invoked when the HTTP request is a POST
-- and contains the string "command". Essentially the game here is
-- to rebind the various output streams used by Axiom so we can
-- capture the normal output. This function returns a set of HTML 5 div
-- blocks:
-- \begin{enumerate}
-- \item stepnum, the value of lastStep()
-- \item command, the value of the  command variable
-- \item algebra, the value of the algebra variable
-- \item mathml, the value of the mathml variable
-- \item type, the value of lastType()
-- \end{enumerate}
-- The HTML functions in the hyperdoc browser depend on the order
-- of these variables so do not change this without changing the
-- corresponding functions in the browser HTML.

  getCommand(s:SExpression,commandf:String):Void ==

      fn:FileName:=filename("","casn","input")
      f:TextFile:=open(fn,"output")
      writeLine!(f,commandf)
      --close!f
     
      WriteLine$Lisp concat ["getCommand: ",commandf]
      command:String:=")read casn.input"

      SETQ(tmpmathml$Lisp, MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
      SETQ(tmpalgebra$Lisp, MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
      SETQ(savemathml$Lisp, _$texOutputStream$Lisp)$Lisp
      SETQ(savealgebra$Lisp, _$algebraOutputStream$Lisp)$Lisp
      SETQ(_$texOutputStream$Lisp,tmpmathml$Lisp)$Lisp
      SETQ(_$algebraOutputStream$Lisp,tmpalgebra$Lisp)$Lisp
--      parseAndInterpret$Lisp command
--      parseAndEvalStr$Lisp command
-- The previous two commands don't exit nicely when a syntactically incorrect command is
-- given to them.  They somehow need to be wrapped in CATCH statements but I haven't
-- figured out how to do this.  parseAndEvalToStringEqNum  uses the following CATCH
-- statements to call parseAndEvalStr but when I try these they don't work.  I get a
-- "NIL is not a valid identifier to use in AXIOM" message. Using parseAndEvalToStringEqNum
-- works and doesn't crash on a syntax error.
--        v := CATCH('SPAD__READER, CATCH('top__level, parseAndEvalStr$Lisp command)$Lisp)$Lisp
--        v = 'restart => ['"error"]
      ans := string parseAndEvalToStringEqNum$Lisp command
      SETQ(resultmathml$Lisp,GET_-OUTPUT_-STREAM_-STRING(_$texOutputStream$Lisp)$Lisp)$Lisp
      SETQ(resultalgebra$Lisp,GET_-OUTPUT_-STREAM_-STRING(_$algebraOutputStream$Lisp)$Lisp)$Lisp
      SETQ(_$texOutputStream$Lisp,savemathml$Lisp)$Lisp
      SETQ(_$algebraOutputStream$Lisp,savealgebra$Lisp)$Lisp
      CLOSE(tmpmathml$Lisp)$Lisp
      CLOSE(tmpalgebra$Lisp)$Lisp
      -- Since strings returned from axiom are going to be displayed in html I
      -- should really check for the characters &,<,> and replace them with
      -- &amp;,&lt;,&gt;.  At present I only check for ampersands in formatMessages.
      mathml:String := string(resultmathml$Lisp)
      algebra:String := string(resultalgebra$Lisp)
      algebra := formatMessages(algebra)
      -- At this point mathml contains the mathml for the output but does not
      -- include step number or type information.  We should also save the command.
      -- I get the type and step number from the $internalHistoryTable
      -- axans:String := concat ["<div class=_"stepnum_">", lastStep(), "</div><div class=_"command_">", command, "</div><div class=_"algebra_">",algebra,"</div><div class=_"mathml_">",mathml,"</div><div class=_"type_">",lastType(),"</div>"]
      WriteLine$Lisp commandf
      axans:String := concat ["<div class=_"stepnum_">", lastStep(), "</div><div class=_"command_">", commandf, "</div><div class=_"algebra_">",algebra,"</div><div class=_"mathml_">",mathml,"</div><div class=_"type_">",lastType(),"</div>"]
      
      WriteLine$Lisp concat ["mathml answer: ",mathml]
      WriteLine$Lisp concat ["algebra answer: ",algebra]
      q:=MAKE_-STRING_-INPUT_-STREAM(axans)$Lisp
      SiCopyStream(q,s)$Lisp
      CLOSE(q)$Lisp
      CLOSE(s)$Lisp

-- getCommandXML is a modification of the geCommand
-- function to ouput a xml tag <answer>...</answer>

  getCommandXML(s:SExpression,command:String):Void ==
      WriteLine$Lisp concat ["getCommand: ",command]
      SETQ(tmpmathml$Lisp, MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
      SETQ(tmpalgebra$Lisp, MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
      SETQ(savemathml$Lisp, _$texOutputStream$Lisp)$Lisp
      SETQ(savealgebra$Lisp, _$algebraOutputStream$Lisp)$Lisp
      SETQ(_$texOutputStream$Lisp,tmpmathml$Lisp)$Lisp
      SETQ(_$algebraOutputStream$Lisp,tmpalgebra$Lisp)$Lisp
--      parseAndInterpret$Lisp command
--      parseAndEvalStr$Lisp command
-- The previous two commands don't exit nicely when a syntactically incorrect command is
-- given to them.  They somehow need to be wrapped in CATCH statements but I haven't
-- figured out how to do this.  parseAndEvalToStringEqNum  uses the following CATCH
-- statements to call parseAndEvalStr but when I try these they don't work.  I get a
-- "NIL is not a valid identifier to use in AXIOM" message. Using parseAndEvalToStringEqNum
-- works and doesn't crash on a syntax error.
--        v := CATCH('SPAD__READER, CATCH('top__level, parseAndEvalStr$Lisp command)$Lisp)$Lisp
--        v = 'restart => ['"error"]
      ans := string parseAndEvalToStringEqNum$Lisp command
      SETQ(resultmathml$Lisp,GET_-OUTPUT_-STREAM_-STRING(_$texOutputStream$Lisp)$Lisp)$Lisp
      SETQ(resultalgebra$Lisp,GET_-OUTPUT_-STREAM_-STRING(_$algebraOutputStream$Lisp)$Lisp)$Lisp
      SETQ(_$texOutputStream$Lisp,savemathml$Lisp)$Lisp
      SETQ(_$algebraOutputStream$Lisp,savealgebra$Lisp)$Lisp
      CLOSE(tmpmathml$Lisp)$Lisp
      CLOSE(tmpalgebra$Lisp)$Lisp
      -- Since strings returned from axiom are going to be displayed in html I
      -- should really check for the characters &,<,> and replace them with
      -- &amp;,&lt;,&gt;.  At present I only check for ampersands in formatMessages.
      mathml:String := string(resultmathml$Lisp)
      algebra:String := string(resultalgebra$Lisp)
      algebra := formatMessages(algebra)
      -- At this point mathml contains the mathml for the output but does not
      -- include step number or type information.  We should also save the command.
      -- I get the type and step number from the $internalHistoryTable
      -- axans:String := concat ["<div class=_"stepnum_">", lastStep(), "</div><div class=_"command_">", command, "</div><div class=_"algebra_">",algebra,"</div><div class=_"mathml_">",mathml,"</div><div class=_"type_">",lastType(),"</div>"]
      WriteLine$Lisp command
      axans:String := concat ["<div class=_"stepnum_">", lastStep(), "</div><div class=_"command_">", command, "</div><div class=_"algebra_">",algebra,"</div><div class=_"mathml_">",mathml,"</div><div class=_"type_">",lastType(),"</div>"]

      WriteLine$Lisp concat ["mathml answer: ",mathml]
      WriteLine$Lisp concat ["algebra answer: ",algebra]
      q:=MAKE_-STRING_-INPUT_-STREAM(axans)$Lisp
      SiCopyStream(q,s)$Lisp
      CLOSE(q)$Lisp
      CLOSE(s)$Lisp



-- The getInterp function is invoked when the HTTP request is a POST
-- and contains the string "command". Essentially the game here is
-- to rebind the various output streams used by Axiom so we can
-- capture the normal output. This function returns a set of HTML 5 div
-- blocks:
-- \begin{enumerate}
-- \item stepnum, the value of lastStep()
-- \item command, the value of the  command variable
-- \item algebra, the value of the algebra variable
-- \item mathml, the value of the mathml variable
-- \item type, the value of lastType()
-- \end{enumerate}
-- The HTML functions in the hyperdoc browser depend on the order
-- of these variables so do not change this without changing the
-- corresponding functions in the browser HTML.

  getInterp(s:SExpression,command:String):Void ==
       WriteLine$Lisp concat ["getInterp: ",command]
       SETQ(tmpmathml$Lisp, MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
       SETQ(tmpalgebra$Lisp, MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
       SETQ(savemathml$Lisp, _$texOutputStream$Lisp)$Lisp
       SETQ(savealgebra$Lisp, _$algebraOutputStream$Lisp)$Lisp
       SETQ(_$texOutputStream$Lisp,tmpmathml$Lisp)$Lisp
       SETQ(_$algebraOutputStream$Lisp,tmpalgebra$Lisp)$Lisp
       ans := string parseAndEvalToStringEqNum$Lisp command
       SETQ(resultmathml$Lisp,_
            GET_-OUTPUT_-STREAM_-STRING(_$texOutputStream$Lisp)$Lisp)$Lisp
       SETQ(resultalgebra$Lisp,_
            GET_-OUTPUT_-STREAM_-STRING(_$algebraOutputStream$Lisp)$Lisp)$Lisp
       SETQ(_$texOutputStream$Lisp,savemathml$Lisp)$Lisp
       SETQ(_$algebraOutputStream$Lisp,savealgebra$Lisp)$Lisp
       CLOSE(tmpmathml$Lisp)$Lisp
       CLOSE(tmpalgebra$Lisp)$Lisp
       -- Since strings returned from axiom are going to be displayed in html I
       -- should really check for the characters &,<,> and replace them with
       -- &amp;,&lt;,&gt;.
       -- At present I only check for ampersands in formatMessages.
       mathml:String := string(resultmathml$Lisp)
       algebra:String := string(resultalgebra$Lisp)
       algebra := formatMessages(algebra)
       -- At this point mathml contains the mathml for the output but does not
       -- include step number or type information.
       -- We should also save the command.
       -- I get the type and step number from the $internalHistoryTable
       axans:String := _
         concat ["<div class=_"stepnum_">", lastStep(), "</div>_
                  <div class=_"command_">", command, "</div>_
                  <div class=_"algebra_">",algebra,"</div>_
                  <div class=_"mathml_">",mathml,"</div>_
                  <div class=_"type_">",lastType(),"</div>"]
--       WriteLine$Lisp concat ["mathml answer: ",mathml]
--       WriteLine$Lisp concat ["algebra answer: ",algebra]
       q:=MAKE_-STRING_-INPUT_-STREAM(axans)$Lisp
       SiCopyStream(q,s)$Lisp
       CLOSE(q)$Lisp
       CLOSE(s)$Lisp


-- The getLisp function is invoked when the HTTP request is a POST
-- and contains the string "lispcall".

  getLisp(s:SExpression,command:String):Void ==
       WriteLine$Lisp concat ["getLisp: ",command]
       evalresult:=EVAL(READ_-FROM_-STRING(command)$Lisp)$Lisp
       mathml:String:=string(evalresult)
--       WriteLine$Lisp concat ["getLisp: after ",mathml]
--       WriteLine$Lisp concat ["getLisp output: ",mathml]
       SETQ(tmpalgebra$Lisp, MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
       SETQ(savemathml$Lisp, _$texOutputStream$Lisp)$Lisp
       SETQ(savealgebra$Lisp, _$algebraOutputStream$Lisp)$Lisp
       SETQ(_$texOutputStream$Lisp,tmpmathml$Lisp)$Lisp
       SETQ(_$algebraOutputStream$Lisp,tmpalgebra$Lisp)$Lisp
       SETQ(resultalgebra$Lisp,_
            GET_-OUTPUT_-STREAM_-STRING(_$algebraOutputStream$Lisp)$Lisp)$Lisp
       SETQ(_$texOutputStream$Lisp,savemathml$Lisp)$Lisp
       SETQ(_$algebraOutputStream$Lisp,savealgebra$Lisp)$Lisp
       CLOSE(tmpalgebra$Lisp)$Lisp
       -- Since strings returned from axiom are going to be displayed in html I
       -- should really check for the characters &,<,> and replace them with
       -- &amp;,&lt;,&gt;.  
       -- At present I only check for ampersands in formatMessages.
       algebra:String := string(resultalgebra$Lisp)
       algebra := formatMessages(algebra)
       -- At this point mathml contains the mathml for the output but does not
       -- include step number or type information.  
       -- We should also save the command.
       -- I get the type and step number from the $internalHistoryTable
       axans:String := _
        concat ["<div class=_"stepnum_">", lastStep(), "</div>_
                 <div class=_"command_">", command, "</div>_
                 <div class=_"algebra_">",algebra,"</div>_
                 <div class=_"mathml_">",mathml,"</div>_
                 <div class=_"type_">",lastType(),"</div>"]       
--       WriteLine$Lisp concat ["mathml answer: ",mathml]
--       WriteLine$Lisp concat ["algebra answer: ",algebra]
       q:=MAKE_-STRING_-INPUT_-STREAM(axans)$Lisp
       SiCopyStream(q,s)$Lisp
       CLOSE(q)$Lisp
       CLOSE(s)$Lisp

-- The getShow function is invoked when the HTTP request is a POST
-- and contains the string "showcall". The )show command generates
-- output to lisp's *standard-output* so we wrap that stream to capture it.
-- The resulting string needs to be transformed into html-friendly form.
-- This is done in the call to replace-entitites (see http.lisp)

  getShow(s:SExpression,showarg:String):Void ==
       WriteLine$Lisp concat ["getShow: ",showarg]
       realarg:=SUBSEQ(showarg,6)$Lisp
       show:=_
        "(progn (setq |$options| '((|operations|))) (|show| '|" realarg "|))"
--       WriteLine$Lisp concat ["getShow: ",show]
       SETQ(SAVESTREAM$Lisp,_*STANDARD_-OUTPUT_*$Lisp)$Lisp
       SETQ(_*STANDARD_-OUTPUT_*$Lisp,_
             MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
       evalresult:=EVAL(READ_-FROM_-STRING(show)$Lisp)$Lisp
       SETQ(evalresult,_
             GET_-OUTPUT_-STREAM_-STRING(_*STANDARD_-OUTPUT_*$Lisp)$Lisp)$Lisp
       SETQ(_*STANDARD_-OUTPUT_*$Lisp,SAVESTREAM$Lisp)$Lisp
       mathml:String:=string(REPLACE_-ENTITIES(evalresult)$Lisp)
       SETQ(tmpalgebra$Lisp, MAKE_-STRING_-OUTPUT_-STREAM()$Lisp)$Lisp
       SETQ(savemathml$Lisp, _$texOutputStream$Lisp)$Lisp
       SETQ(savealgebra$Lisp, _$algebraOutputStream$Lisp)$Lisp
       SETQ(_$texOutputStream$Lisp,tmpmathml$Lisp)$Lisp
       SETQ(_$algebraOutputStream$Lisp,tmpalgebra$Lisp)$Lisp
       SETQ(resultalgebra$Lisp,_
            GET_-OUTPUT_-STREAM_-STRING(_$algebraOutputStream$Lisp)$Lisp)$Lisp
       SETQ(_$texOutputStream$Lisp,savemathml$Lisp)$Lisp
       SETQ(_$algebraOutputStream$Lisp,savealgebra$Lisp)$Lisp
       CLOSE(tmpalgebra$Lisp)$Lisp
       -- Since strings returned from axiom are going to be displayed in html I
       -- should really check for the characters &,<,> and replace them with
       -- &amp;,&lt;,&gt;.  
       -- At present I only check for ampersands in formatMessages.
       algebra:String := string(resultalgebra$Lisp)
       algebra := formatMessages(algebra)
       -- At this point mathml contains the mathml for the output but does not
       -- include step number or type information.  
       -- We should also save the command.
       -- I get the type and step number from the $internalHistoryTable
       axans:String := _
        concat ["<div class=_"stepnum_">", lastStep(), "</div>_
                 <div class=_"command_">", showarg, "</div>_
                 <div class=_"algebra_">",algebra,"</div>_
                 <div class=_"mathml_">",mathml,"</div>_
                 <div class=_"type_">",lastType(),"</div>"]       
--       WriteLine$Lisp concat ["mathml answer: ",mathml]
       q:=MAKE_-STRING_-INPUT_-STREAM(axans)$Lisp
       SiCopyStream(q,s)$Lisp
       CLOSE(q)$Lisp
       CLOSE(s)$Lisp

  lastType():String ==
-- To examine the $internalHistoryTable uncomment the following lines
      WriteLine$Lisp "lastType begin"
--  WriteLine$Lisp string _$internalHistoryTable$Lisp
-- need to pick out first member of internalHistoryTable and then pick out
-- the element with % as first element, here's an example showing just
-- the first element of the list, which correponds to the last command.
-- Note that the last command does not necessarily correspond to the last
-- element of the first element of $internalHistoryTable as it is in this
-- example.
--(
-- (4 NIL
-- (x (value (BasicOperator) WRAPPED . #<vector 09a93bd0>))
-- (y (value (BasicOperator) WRAPPED . #<vector 09a93bb4>))
-- (% (value (Matrix (Polynomial (Integer))) WRAPPED . #<vector 0982e0e0>))
-- )
--...
--)
-- Also need to check for input error in which case the $internalHistoryTable
-- is not changed and the type retrieved would be that for the last correct
-- input.
      SETQ(first$Lisp,FIRST(_$internalHistoryTable$Lisp)$Lisp)$Lisp
      count:Integer := 0
      hisLength:Integer := LIST_-LENGTH(_$internalHistoryTable$Lisp)$Lisp
      length:Integer := LIST_-LENGTH(first$Lisp)$Lisp
-- This initializes stepSav.  The test is a bit of a hack, maybe I'll
-- figure out the right way to do it later.
      if string stepSav$Lisp = "#<OBJNULL>" then SETQ(stepSav$Lisp, 0$Lisp)$Lisp
-- If hisLength = 0 then the history table has been reset to NIL
-- and we're starting numbering over
      if hisLength = 0 then SETQ(stepSav$Lisp, 0$Lisp)$Lisp
      if hisLength > 0 and
        CAR(CAR(_$internalHistoryTable$Lisp)$Lisp)$Lisp ^= stepSav$Lisp then
          SETQ(stepSav$Lisp, CAR(CAR(_$internalHistoryTable$Lisp)$Lisp)$Lisp)$Lisp
          while count < length  repeat
              position(char "%",string FIRST(first$Lisp)$Lisp) = 2 => count := length+1
              count := count +1
              SETQ(first$Lisp,REST(first$Lisp)$Lisp)$Lisp
      count = length + 1 => string SECOND(SECOND(FIRST(first$Lisp)$Lisp)$Lisp)$Lisp
      ""

  lastStep():String ==
      string CAR(CAR(_$internalHistoryTable$Lisp)$Lisp)$Lisp

  formatMessages(str:String):String ==
      WriteLine("formatMessages")$Lisp
      -- I need to replace any ampersands with &amp; and may also need to
      -- replace < and > with &lt; and &gt;
      strlist:List String
      WriteLine$Lisp "formatMessages1"
      WriteLine(str)$Lisp
      strlist := split(str,char "&")
      str := ""
      -- oops, if & is the last character in the string this method
      -- will eliminate it.  Need to redo this.
      for s in strlist repeat
          str := concat [str,s,"&amp;"]
      strlen:Integer := #str
      str := str.(1..(#str - 5))
      WriteLine$Lisp "formatMessages2"
--       WriteLine(str)$Lisp
      -- Here I split the string into lines and put each line in a "div".
      WriteLine$Lisp "formatMessages2.1"
      strlist := split(str, char string NewLine$Lisp)
      WriteLine$Lisp "formatMessages3"
      str := ""
      WriteLine("formatMessages4")$Lisp
      WriteLine(concat strlist)$Lisp
      for s in strlist repeat
          WriteLine(s)$Lisp
          str := concat [str,"<div>",s,"</div>"]
      WriteLine("formatMessages5")$Lisp
      str

  getContentType(pathvar:String):String ==
      WriteLine("getContentType begin")$Lisp
      -- set default content type
      contentType:String := "text/plain"
      -- need to test for successful match?
      StringMatch(".*\.(.*)$", pathvar)$Lisp
      u:UniversalSegment(Integer)
      u := segment(MatchBeginning(1)$Lisp+1,MatchEnd(1)$Lisp)$UniversalSegment(Integer)
      extension:String := pathvar.u
      WriteLine$Lisp concat ["file extension: ",extension]
      -- test for extensions: html, htm, xml, xhtml, js, css
      if extension = "html" then
          contentType:String := "text/html"
      else if extension = "htm" then
          contentType:String := "text/htm"
      else if extension = "xml" then
          contentType:String := "application/xml"
      else if extension = "xhtml" then
          contentType:String := "application/xhtml+xml"
      else if extension = "js" then
          contentType:String := "application/javascript"
      else if extension = "css" then
          contentType:String := "text/css"
      else if extension = "png" then
          contentType:String := "image/png"
      else if extension = "jpg" then
          contentType:String := "image/jpeg"
      else if extension = "jpeg" then
          contentType:String := "image/jpeg"
      else if extension = "gif" then
          contentType:String := "image/gif"
      else if extension = "txt" then
	  contentType:String := "text/plain"
      WriteLine$Lisp concat ["Content-Type: ",contentType]
      WriteLine("getContentType end")$Lisp
      contentType
