\documentclass{article}
\usepackage{noweb}
\begin{document}

\title{axiom-plot.lisp}
\author{Kai Kaminski}
\maketitle


\section{Code}

This file defines the package {\tt AXIOM-PLOT} with nickname {\tt
  AXPLOT}, which exports only one symbol, {\tt PLOT-2D}. This function
takes several arguments, like an output stream, a title and the
plot-data generated by AXIOMsys, and writes the corresponding plot to
the output stream in SVG format


\subsubsection{MakeAffineTransformation}
This function returns a function that maps a point linearly from the
square determined through {\tt *-1} to the square defined by {\tt
  *-2}.
<<MakeAffineTrafo>>=
(defun make-affine-transformation (min-x-1 min-y-1 max-x-1 max-y-1 min-x-2 min-y-2 max-x-2 max-y-2)
  "Returns a function that maps the square determined through *-1
linearly onto the square determined through *-2"
  (let* ((ratio-x (/ (- max-x-2 min-x-2)
                     (- max-x-1 min-x-1)))
         (ratio-y (/ (- max-y-2 min-y-2)
                     (- max-y-1 min-y-1)))
         (offset-x (- min-x-2 (* ratio-x min-x-1)))
         (offset-y (- min-y-2 (* ratio-y min-y-1))))
    (lambda (point)
      (let ((x (first point))
            (y (second point)))
        (list (+ offset-x (* ratio-x x))
              (+ offset-y (* ratio-y y)))))))
@


\subsubsection{RestrictToInterval}
This function returns {\tt x}, if $\mbox{\tt min} <= \mbox{\tt x} <= \mbox{\tt
  max}$. Otherwise it returns $y\in\{\mbox{\tt min},\mbox{\tt max}\}$
such that $|\mbox{\tt x}-y|$ is minimal.
<<RestrictToInterval>>=
(defun restrict-to-interval (x min max)
  (cond
    ((<= min x max) x)
    ((< x min) min)
    ((> x max) max)))

@


\subsubsection{Plot2D}
This function creates a two-dimensional plot from the given data. It
should be replaced by or made into a plotting library. Support for
output formats other than SVG would also be nice.
<<Plot2D>>=
(defun plot-2d (stream title title-size title-padding padding unit ranges branches)
  (let* ((min-x (nth 0 ranges))
         (min-y (nth 1 ranges))
         (max-x (nth 2 ranges))
         (max-y (nth 3 ranges))
         (width (- max-x min-x))
         (height (- max-y min-y))
         (p-width (- *frame-width* (* 2 padding)))
         (p-height (- *frame-height* (* 2 padding) title-size title-padding))
         (ratio-x (/ p-width width))
         (ratio-y (/ p-height height))
         (ratio (min ratio-x ratio-y))
         (offset-x (/ (- p-width (* ratio width)) 2))
         (offset-y (/ (- p-height (* ratio height)) 2))
         (trafo (make-affine-transformation min-x min-y max-x max-y
                                                   (+ padding offset-x)
                                                   (- *frame-height* padding offset-y)
                                                   (- *frame-width* padding offset-x)
                                                   (+ padding title-size title-padding offset-y)))
         (branches (mapcar
                    (lambda (points)
                      (mapcar
                       trafo
                       points))
                    branches)))
    (with-svg-output (stream :width (format nil "~Acm" *frame-width*) :height (format nil "~Acm" *frame-height*))
      (text (:x (format nil "~Acm" (/ *frame-width* 2)) :y (format nil "~Acm" (+ title-size padding)) :style "text-anchor:middle" :font-size (format nil "~Acm" title-size))
            (str title))
      (line :x1 (format nil "~Acm" padding) :y1 (format nil "~Acm" (+ title-size padding (/ title-padding 2)))
            :x2 (format nil "~Acm" (+ padding p-width)) :y2 (format nil "~Acm" (+ title-size padding (/ title-padding 2)))
            :stroke "black" :stroke-width "1.5pt")

      (let* ((axis-x (restrict-to-interval 0 min-x max-x))
             (axis-y (restrict-to-interval 0 min-y max-y))
             (axis (funcall trafo (list axis-x axis-y)))
             (ll (funcall trafo (list min-x min-y)))
             (ur (funcall trafo (list max-x max-y)))
             (unit (or unit (list 1.0 1.0)))
             (unit-x (first unit))
             (unit-y (second unit)))
        (line :x1 (format nil "~Acm" (first axis))
              :y1 (format nil "~Acm" (second ll))
              :x2 (format nil "~Acm" (first axis))
              :y2 (format nil "~Acm" (second ur))
              :stroke-width "0.5pt"
              :stroke "black")
        (line :x1 (format nil "~Acm" (first ll))
              :y1 (format nil "~Acm" (second axis))
              :x2 (format nil "~Acm" (first ur))
              :y2 (format nil "~Acm" (second axis))
              :stroke-width "0.5pt"
              :stroke "black")

        (loop for xr = axis-x then (+ xr unit-x)
              for xl = axis-x then (- xl unit-x)
              for pr = (funcall trafo (list xr axis-y))
              for pl = (funcall trafo (list xl axis-y))
              while (or (>= xl min-x) (<= xr max-x))
              do
              (when (<= xr max-x)
                (line :x1 (format nil "~Acm" (first pr))
                      :y1 (format nil "~Acm" (+ (second pr) 0.1))
                      :x2 (format nil "~Acm" (first pr))
                      :y2 (format nil "~Acm" (- (second pr) 0.1))
                      :stroke-width "0.5pt"
                      :stroke "black")
                (unless (= xr axis-x)
                  (text (:x (format nil "~Acm" (first pr)) :y (format nil "~Acm" (+ (second pr) 0.35))
                            :font-size "0.3cm" :style "text-anchor:middle;")
                        (str xr))))
              (when (>= xl min-x)
                (line :x1 (format nil "~Acm" (first pl))
                      :y1 (format nil "~Acm" (+ (second pl) 0.1))
                      :x2 (format nil "~Acm" (first pl))
                      :y2 (format nil "~Acm" (- (second pl) 0.1))
                      :stroke-width "0.5pt"
                      :stroke "black")
                (unless (= xl axis-x)
                  (text (:x (format nil "~Acm" (first pl)) :y (format nil "~Acm" (+ (second pl) 0.35))
                            :font-size "0.3cm" :style "text-anchor:middle;")
                        (str xl)))))

        (loop for yr = axis-y then (+ yr unit-y)
              for yl = axis-y then (- yl unit-y)
              for pr = (funcall trafo (list axis-x yr))
              for pl = (funcall trafo (list axis-x yl))
              while (or (>= yl min-y) (<= yr max-y))
              do
              (when (<= yr max-y)
                (line :x1 (format nil "~Acm" (+ (first pr) 0.1))
                      :y1 (format nil "~Acm" (second pr))
                      :x2 (format nil "~Acm" (- (first pr) 0.1))
                      :y2 (format nil "~Acm" (second pr))
                      :stroke-width "0.5pt"
                      :stroke "black")
                (unless (= yr axis-y)
                  (text (:x (format nil "~Acm" (- (first pr) 0.15)) :y (format nil "~Acm" (+ (second pr) 0.1))
                            :font-size "0.3cm" :text-anchor "end")
                        (str yr))))
              (when (>= yl min-y)
                (line :x1 (format nil "~Acm" (+ (first pl) 0.1))
                      :y1 (format nil "~Acm" (second pl))
                      :x2 (format nil "~Acm" (- (first pl) 0.1))
                      :y2 (format nil "~Acm" (second pl))
                      :stroke-width "0.5pt"
                      :stroke "black")
                (unless (= yl axis-y)
                  (text (:x (format nil "~Acm" (- (first pl) 0.15)) :y (format nil "~Acm" (+ (second pl) 0.1))
                            :font-size "0.3cm" :text-anchor "end")
                        (str yl))))))
      
      (loop for points in branches
            do
            (loop for (x1 y1) in points
                  for (x2 y2) in (cdr points)
                  do
                  (line :x1 (format nil "~Acm" x1)
                        :y1 (format nil "~Acm" y1)
                        :x2 (format nil "~Acm" x2)
                        :y2 (format nil "~Acm" y2)
                        :stroke "black" :stroke-width "0.5pt"))))
    (list *frame-width* *frame-height*)))

@

<<*>>=
(defpackage :axiom-plot
  (:nicknames :axplot)
  (:use :cl :axcom :cl-ppcre :cl-svg)
  (:export #:plot-2d))

(in-package :axiom-plot)

(defparameter *frame-width* 15.0)
(defparameter *frame-height* 8.0)

<<MakeAffineTrafo>>
<<RestrictToInterval>>

<<Plot2D>>
@

\section{License}

<<license>>=
Copyright (c) 2005, Kai Kaminski
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
\end{document}